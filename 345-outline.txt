This file was produced by examining the topic list from the course website as of June 2017


Fundamental Types
  integer types char, wchar_t, short, int, long, long long
  floating point types float, double, long double
  auto (type inference)
  structure alignment alignas/alignof - byte boundaries for creating something
   struct alignas(8)  A { int n; char c;} a[] {1, 'a', 2, 'b', 3, 'c'}};
   std::cout << "align of A = " << alignof(A) << " " << (void*)&a;  // &a is on a 8 byte boundary
   struct alignas(16) B { int n; char c;} b[] {1, 'a', 2, 'b', 3, 'c'}};
   std::cout << "align of B = " << alignof(B) << " " << (void*)&b;  // &b is on a 16 byte boundary


Non-Fundamental Types
  pointers, references, arrays
  typedef (synonym), please end typedefs with '_t'  typedef float Real_t;
  std::move, std::ref, l-value + r-value (arg-type&& arg)
  union, class, struct, bit-fields (after mid-term break)
  unions: please end unions with '_u'  union MyUnion_u { ... };
  structs: please end structs with '_s'  struct MyElement_s { ... };
  range-based for
  rule-of-5

Classes and Scoped Enumerations
  class, struct, union
  copy constructors, move contructors
  class variable (static class variables)
  enumerations, scoped enumerations
  enum enum_e {ONE, TWO, THREE};  // C++98, C1977
  enum class enum1_e {ONE = 100, TWO, THREE}; // C++14
  enum class enum2_e {ONE = 200, TWO, THREE};
  enum class enum3_e {ONE = 300, TWO, THREE};
  usage: enum2_e::ONE

Inheritance and Inclusion Polymorphism
  ABC's Abstract Base Class, pure virtual function, virtual func (arg,...) const = 0;
  polymorphism: each derived class implements functions wth the same name
    - can be enforced by deriving derived classes from an ABC with pure virtual functions
  multiple inheritance, 
    - how many copies of base class? 
      - private copy for each derived class - derive it
      - shared copy for all derived classes - declare base class as 'virtual'
  clone - commonly used, often source of memory leaks, need to be properly deleted
    class B {public: virtual B* clone() const = 0; ...};
    class D1 : public B { public: D1* clone() const { return new D1(*this); } ... };
    class D2 : public B { public: D2* clone() const { return new D2(*this); } ... };
  #include <typeinfo>
    typeid( some variable ).name() <-- returns a name created by the compiler for the variable

Templates
  Function templates // OOP244
  template <typename T> T& min(T& a, T& b) { return a < b? a: b; }
  template <> // denotes specialization (turns off default function template)
  char* min<char*>(char* a, char* b) { return std::strcmp(a, b) < 0 ? a : b; }

  Class templates    // OOP244+ and OOP345
  template <typename T> class X{T* tTable; public: ...};
  X<double> xDouble;
  
Compositions, Aggregations and Associations
  Compositions, 
    class room; class building;
    class building{ vector<room> roomList; void addRoom(room& r) {roomList.push_back(r);} ...}

  Aggregations
    class duck; class pond;
    class pond{ 
      list<duck> duckList; 
    public: 
      void addDuck(duck& d){ duckList.push_back(d);} 
      void removeDuck(duck& d)
      {
        for(auto it = duckList.begin(); it != duckList.end(); it++) {
          if(*it == d) {
            it->erase();
            return;
          }
        }
        throw "removeDuck: cannot find duck";
      }
    };

  Associations
    class club; class member;
    class club{ list<member> memberList; public: void addMember(member m); void removeMember(member m); };
    class member{ list<club> clubList; public: void addClub(club c); void removeClub(club c); };

 Expressions
   SURPRISE! these two expressions behave differently
     i = i++;

     double trouble[100];
     i = 2;
     trouble[i] = trouble[i++];

   When in doubt, use brackets and place ++/-- operators on seperate lines.

Functions
  function trailing return type  auto f = [] (int a) -> double { return 2f * a; };
  decltype(2 * 5 +7.) r = 99;
  recursion
  functions pointers (a pointer that points to a function)
    float (*f) (double arg1, int arg2, char arg3, float arg4);  // C1977
    std::function<float (double, int, char, float)> f;          // C++11
  bind - takes function and arguments, returns std::function<void(void)> function pointer
       - requires the use of std::ref if an argument to the function is called by reference

          int i;

          void func1(int i, ...) { ...}
          std::function<void(void)> f1 = bind(func1, i, ...);
          cout << f1() << "\n";

          void func2(int& i, ...) { ...}
          std::function<void(void)> f2 = bind(func2, std::ref(i), ...);
          cout << f2() << "\n";

  class FunctionObject {public: void operator () (int arg) { return 5 * arg * arg + 6; } }; // c++98
  FunctionObject fo;
  cout << fo(99) << "\n";

  int ii = 47;
  auto f1 = [ii] (int arg) { return ii * arg * arg + 6 ; }; // c++11 lambda/capture/closure/anonymous
  cout << f1(99) << "\n";
  ii = 100;
  cout << f1(99) << "\n";

  int ii = 47;
  auto f2 = [&ii] (int arg) { return ii * arg * arg + 6 ; }; // c++11 lambda/capture/closure/anonymous
  cout << f2(99) << "\n";
  ii = 100;
  cout << f2(99) << "\n";

  auto f3 = [=] (int arg) { return ii * arg * arg + 6 ; }; // c++11 lambda/capture/closure/anonymous
  auto f4 = [&] (int arg) { return ii * arg * arg + 6 ; }; // c++11 lambda/capture/closure/anonymous

Error Handling
  try {
    ...
  } catch(type1 t1) { 
    ...
  } catch(type2 t2) { 
    ...
  } catch(type3 t3) { 
    ...
  }

  exit(i), abort(), terminate(), 
  atexit( std::function<void(void)> ) or equivalently  atexit( void (*f) (void) )

  void* datablock = new ...;
  on_exit( int exitCode, std::function<void(void)> ) or equivalently  

  on_exit( void (*f) (int exitCode, void* dataBlock), void* dataBlock )

  void f(int exitCode, void* dataBlock)
  {
    cout << "program exiting with code " << exitCode << " " << (char*) dataBlock << "\n";
  }
  char* p = "we are over!";
  on_exit( f, (void*) p);

Standard Library
  string, wstring, cout, wcout, fstream, wfstream, ios::, wios::, ...
  list, vector, queue, stack, deque (set, map, multimap not covered, but cool!)
  std::string_view (<string_view>) - a read-only contiguous sequence of characters (see above)
  std::variant<T, ...>() (<variant>) - represents a type-safe union
  std::optional<T> (<optional>) - may or may not contain a value (beyond scope)
  std::any (<any>) - single values of any type (beyond scope)
  std::uncaught_exceptions (<exception>) - stack is in the process of unwinding
  Uniform container access std::size std::empty std::data - number of elements, emptiness, direct access to underlying array


Containers and Iterators
  list, vector, queue, stack, deque (set, map, multimap not covered, but cool!)

  vector<int> v;
  for(size_t i = 0;  i < v.size(); i++) { // C++98
    cout << v[i] << "\n";
  }
  for( vector<int>::iterator it = v.begin(); it != v.end(); it++) { // C++98
    cout << *it << "\n";
  }
  for( auto it = v.begin(); it != v.end(); it++) { // C++11
    cout << *it << "\n";
  }
  for( auto e : v) { { //  makes a deep copy of the 'v' element. his involves ctor/dtor/copy assignment operators/...
    cout << e << "\n"; //  really bad idea to use this form of range-based for 
  }
  for( auto& e : v) {  // uses references which are pointers, no ctor/dtor/copy assignment operators/...
    cout << e << "\n"; // use this instead
  }
  

<mid-term break>

Algorithms
  - mainly wrapper for a for loop
  - check with roule-of-5 class to see if madness going on

File Stream Objects
  - file open parameters for read, write, read-write, at-the-end, append mode, binary
  - error such as eof
  - 'w' versions for processing files with wide characters

Raw Pointers
  - 'C' pointers

Smart Pointers
  - pass pointer allocated by 'new' to class. When calls goes out of scope, the class destructor calls delete

Multi-Threading
  - race conditions
  - priority inversion

Thread Classes
  - thread/join/detach
  - future/async/get

Pre-Processor Directives
  - define macros with parameters #, ## operators

Arrays and Pointers to Arrays
  - tables of data
  - fixed size table item count = sizeof(table) / sizeof(table[0])

Multiple Inheritance
  - covered above

Bit-Wise Expressions
  ~ - | & ^ << >> 
  bitprint, left and right circular shift
  negate an integer -i computed by compliment and increment operation : -i = (~i) + 1

Linked List Technology
  - STL library linked-list conitainer: stacks, queues, deque, list 
  - doubley linked lists, circular lists, xor linked list
  - double buffer, triple buffer, etc
  - take DSA555 data Structures and Algorithms

Other Topics

